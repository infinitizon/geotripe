// Alerts
.alert-variant(@background;@border;@text-color) {
  background-color: @background;
  border-color: @border;
  color: @text-color;
  hr {
    border-top-color: darken(@border, 5%);
  }
  .alert-link {
    color: darken(@text-color, 10%);
  }
}

// Contextual backgrounds
.bg-variant(@color) {
  background-color: @color;
  a&:hover {
    background-color: darken(@color, 10%);
  }
}

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.button-variant(@color;@background;@border) {
  color: @color;
  background-color: @background;
  border-color: @border;
  &:visited {
    color: @color;
  }
  &:hover,
  &:focus,
  &.focus,
  &:active,
  &.active,
  .open > .dropdown-toggle& {
    color: @color;
    background-color: @background;
    border-color: darken(@border, 10%);
  }
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    .square(100%);
    background-color: darken(@background, 10%);
    .opacity(0);
    .scale3d(0.7, 1, 1);
    .transition(transform 0.4s, opacity 0.4s;);
    .animation-timing-function(cubic-bezier(0.2, 1, 0.3, 1));
    .rounded(@border-radius-base);
  }
  &,
  &::before {
    .animation-timing-function(cubic-bezier(0.2, 1, 0.3, 1))
  }
  &:hover::before {
    .opacity(1);
    .translate3d(0, 0, 0);
  }
  &:active,
  &.active,
  .open > .dropdown-toggle& {
    background-image: none;
    border-color: darken(@border, 12%);
    &::before {
      .opacity(1);
      .translate3d(0, 0, 0);
      background-color: darken(@background, 10%);
    }
    &:hover,
    &:focus,
    &.focus {
      color: @color;
      background-color: darken(@background, 5%);
          border-color: darken(@border, 5%);
    }
  }
  &.disabled::before,
  &[disabled]::before {
    z-index: 1;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &, &:hover, &:focus, &.focus, &:active, &.active {
      background-color: @background;
      border-color: @border;
    }
  }
  .badge {
    color: @background;
    background-color: @color;
  }
  &.btn-outline {
    background-color: transparent;
    background-image: none;
    border-color: @border;
    color: @background;
    &:hover, &:focus, &:active, &.active {
      background-color: @background;
      color: @color;
    }
  }
}




// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
  &::before, &::after {
    content: " "; // 1
    display: table; // 2
  }
  &::after {
    clear: both;
  }
}

//
.font-awesome() {
  display: inline-block;
  font: normal normal normal 14px/1 @fontawesome-family-icon;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-size: inherit;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  transform: translate(0, 0);
}

// Footer vertical align
//
// Vertically center elements in the footer.
// Example: an element has a height of 30px, so write out `.footer-vertical-align(30px);` to calculate the appropriate top margin.
.footer-vertical-align(@element-height) {
  margin-top: ((@footer-height - @element-height) / 2);
  margin-bottom: ((@footer-height - @element-height) / 2);
}

.footer-vertical-align-padding(@element-height) {
  padding-top: ((@footer-height - @element-height) / 2);
  padding-bottom: ((@footer-height - @element-height) / 2);
}

// Text
.form-control-validation(@text-color: #555;@border-color: #ccc;@background-color: #f5f5f5;@text-color-o: #fff;) {
  // Color the label and help text
  .help-block, .control-label, .radio, .checkbox, .radio-inline, .checkbox-inline, &.radio label, &.checkbox label, &.radio-inline label, &.checkbox-inline label {
    color: @text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: @border-color;
    .box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075)); // Redeclare so transitions work
    &:focus {
      border-color: darken(@border-color, 10%);
      @shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px lighten(@border-color, 20%);
      .box-shadow(@shadow);
    }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: @text-color-o;
    border-color: @border-color;
    background-color: @background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: @text-color;
  }
}

// Gradients
#gradient {
  // Horizontal gradient, from left to right
  //
  // Creates two color stops, start and end, by specifying a color and position for each color stop.
  // Color stops are not available in IE9 and below.
  .horizontal(@start-color: #555;@end-color: #333;@start-percent: 0%;@end-percent: 100%) {
    background-image: -webkit-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Opera 12
    background-image: linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)", argb(@start-color), argb(@end-color))); // IE9 and down
  }
  // Vertical gradient, from top to bottom
  //
  // Creates two color stops, start and end, by specifying a color and position for each color stop.
  // Color stops are not available in IE9 and below.
  .vertical(@start-color: #555;@end-color: #333;@start-percent: 0%;@end-percent: 100%) {
    background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // Opera 12
    background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", argb(@start-color), argb(@end-color))); // IE9 and down
  }
  .directional(@start-color: #555;@end-color: #333;@deg: 45deg) {
    background-repeat: repeat-x;
    background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient(@deg, @start-color, @end-color); // Opera 12
    background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  }
  .horizontal-three-colors(@start-color: #00b3ee;@mid-color: #7a43b6;@color-stop: 50%;@end-color: #c3325f) {
    background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
    background-image: -o-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
    background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)", argb(@start-color), argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .vertical-three-colors(@start-color: #00b3ee;@mid-color: #7a43b6;@color-stop: 50%;@end-color: #c3325f) {
    background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    background-image: -o-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", argb(@start-color), argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
  }
  .radial(@inner-color: #555;@outer-color: #333) {
    background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
    background-image: radial-gradient(circle, @inner-color, @outer-color);
    background-repeat: no-repeat;
  }
  .striped(@color: rgba(255,255,255,.15);@angle: 45deg) {
    background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
    background-image: -o-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
    background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
  }
}

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) { // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      padding-left:  (@gutter / 2);
      padding-right: (@gutter / 2);
    }
  }
  .col(1); // kickstart it
}

// Navbar vertical align
//
// Vertically center elements in the header.
// Example: an element has a height of 30px, so write out `.header-vertical-align(30px);` to calculate the appropriate top margin.
.header-vertical-align(@element-height) {
  margin-top: ((@header-height - @element-height) / 2);
  margin-bottom: ((@header-height - @element-height) / 2);
}

.header-vertical-align-padding(@element-height) {
  padding-top: ((@header-height - @element-height) / 2);
  padding-bottom: ((@header-height - @element-height) / 2);
}

// Labels
.label-variant(@color) {
  background-color: @color;
  &[href] {
    &:hover, &:focus {
      background-color: darken(@color, 10%);
    }
  }
}

// List Groups
.list-group-item-variant(@state;@background;@color) {
  .list-group-item-@{state} {
    color: @color;
    background-color: @background;
    a& {
      color: @color;
      .list-group-item-heading {
        color: inherit;
      }
      &:hover,
      &:focus {
        color: @color;
        background-color: darken(@background, 5%);
      }
      &.active,
      &.active:hover,
      &.active:focus {
        color: #fff;
        background-color: @color;
        border-color: @color;
      }
    }
  }
}

// Horizontal dividers
//
// Dividers (basically an hr) within dropdowns and nav lists
.nav-divider(@color: #e5e5e5) {
  height: 1px;
  margin: ((@line-height-computed / 2) - 1) 0;
  overflow: hidden;
  background-color: @color;
}

// Panels
.panel-variant(@border;@heading-text-color;@heading-bg-color;@heading-border;) {
  border-color: @border;
  & > .panel-heading {
    color: @heading-text-color;
    background-color: @heading-bg-color;
    border-color: @heading-border;
    + .panel-collapse .panel-body {
      border-top-color: @border;
    }
    .badge {
      color: @heading-bg-color;
      background-color: @heading-text-color;
    }
  }
  & > .panel-footer {
    + .panel-collapse .panel-body {
      border-bottom-color: @border;
    }
  }
}

.parsley-validation(@text-color: #555;@border-color: #ccc;@background-color: #f5f5f5) {
  border-color: @border-color;
  .box-shadow(none);
  &:focus {
    border-color: darken(@border-color, 10%);
    .box-shadow(none);
  }
}

// Placeholder
.placeholder(@color: @input-color-placeholder) {
  &:-moz-placeholder {
    color: @color;
    font-size: 12px;
  }
  &::-moz-placeholder {
    color: @color;
    font-size: 12px;
  }
  &:-ms-input-placeholder {
    color: @color;
    font-size: 12px;
  }
  &::-webkit-input-placeholder {
    color: @color;
    font-size: 12px;
  }
}

// Progress bars
.progress-bar-variant(@color) {
  background-color: @color;
  .progress-striped & {
    #gradient > .striped(@color);
  }
}

// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
.reset-filter() {
  filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

// Sizing shortcuts
.size(@width;@height) {
  width: @width;
  height: @height;
}

.square(@size) {
  .size(@size;@size);
}

.cn-2-cn() {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

// Sidebar skin generator
.sidebar-variant(@background;
@color;
@hover-active-color;
@brand-background;
@brand-color;
) {
  .sidebar-panel {
    background-color: @background;
    > .brand {
      background-color: @brand-background;
      a {
        color: @brand-color;
        &:active, &:focus, &:hover {
          color: lighten(@brand-color, 5%);
        }
      }
      .hamburger-icon span {
        background-color: @brand-color;
      }
      .hamburger-icon:hover span {
        background-color: @hover-active-color;
      }
    }
    > nav {
      > ul > li > ul {
        background-color: darken(@background, 3%)
      }
      > ul > li > a:hover,
      > ul > li.open > a,
      > ul > li.open > a:hover,
      > ul > li.open > a:focus {
        background-color: darken(@background, 5%);
      }
      li.open > a,
      li.active > a {
        color: @hover-active-color;
      }
      .open > a,
      .open > a:hover,
      .open > a:focus {
        background-color: transparent;
      }
      a {
        color: @color;
        &:active, &:focus, &:hover {
          color: @hover-active-color;
        }
      }
    }
  }
  .quick-launch-panel {
    background: @background;
    .close {
      background: darken(@background, 10%);
      color: @color;
    }
    a {
      color: @color;
      &:hover {
        color: @hover-active-color;
      }
    }
  }
  @media screen and (min-width: @screen-sm-min) {
    .small-menu .sidebar-panel > nav li.open {
      background-color: darken(@background, 2%);
    }
    .small-menu .sidebar-panel nav > ul > li > .sub-menu {
      background-color: darken(@background, 2%)
    }
  }
}

// Header skin generator
.header-variant(@background;
@hover-active-background;
@color;
@hover-active-color) {
  .main-panel > .header {
    background-color: @background;
    .navbar-text {
      color: @color;
    }
    .nav > li > a {
      color: @color;
    }
    .nav > li > a:hover,
    .nav > li > a:focus {
      background-color: @hover-active-background;
      color: @hover-active-color;
    }
    .nav .open > a,
    .nav .open > a:hover,
    .nav .open > a:focus {
      background-color: @hover-active-background;
      color: @hover-active-color;
    }
    .hamburger-icon {
      span {
        background: @color;
      }
      &:hover span {
        background: @hover-active-color;
      }
    }
  }
}



// Tables
.table-row-variant(@state;
@background;
@border) {
  .table > thead > tr, .table > tbody > tr, .table > tfoot > tr {
    > td.@{state},
    > th.@{state},
    &.@{state} > td,
    &.@{state} > th {
      background-color: lighten(@background, 25%);
      border-color: lighten(@border, 20%);
    }
  }
  .table-hover > tbody > tr {
    > td.@{state}:hover,
    > th.@{state}:hover,
    &.@{state}:hover > td,
    &:hover > .@{state},
    &.@{state}:hover > th {
      background-color: darken(@background, 28%);
      border-color: darken(@border, 28%);
    }
  }
}

// Text
.text-emphasis-variant(@color) {
  color: @color;
  a&:hover {
    color: darken(@color, 10%);
  }
}

.rounded(@radius: 2px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}

.box-shadow(@arguments) {
  -webkit-box-shadow: @arguments;
  -moz-box-shadow: @arguments;
  box-shadow: @arguments;
}

.transform(...) {
  -webkit-transform: @arguments;
  -moz-transform: @arguments;
  -o-transform: @arguments;
  -ms-transform: @arguments;
  transform: @arguments;
}

.rotate(@deg:5deg){
  .transform(rotate(@deg));
}

.translate(@x:0, @y:0) {
  .transform(translate(@x, @y));
}

.translate3d(@x:0, @y:0, @z:0) {
  .transform(translate3d(@x, @y, @z));
}

.scale(@x:0, @y:0) {
  .transform(scale(@x, @y));
}

.scale3d(@x:0, @y:0, @z:0) {
  .transform(scale3d(@x, @y, @z));
}

.transition(@value) {
  -webkit-transition: @value;
  -moz-transition: @value;
  -o-transition: @value;
  transition: @value;
}

.animation-duration(@duration) {
  -webkit-animation-duration: @duration;
  -moz-animation-duration: @duration;
  -o-animation-duration: @duration;
  animation-duration: @duration;
}

.animation-timing-function(@timing) {
  -webkit-animation-timing-function: @timing;
  -moz-animation-timing-function: @timing;
  -o-animation-timing-function: @timing;
  animation-timing-function: @timing;
}

.animation-fill-mode(@mode) {
  -webkit-animation-fill-mode: @mode;
  -moz-animation-fill-mode: @mode;
  -o-animation-fill-mode: @mode;
  animation-fill-mode: @mode;
}

.animation-name(@name) {
  -webkit-animation-name: @name;
  -moz-animation-name: @name;
  -o-animation-name: @name;
  animation-name: @name;
}

.transition-delay(@delay) {
  -webkit-transition-delay: @delay;
  -moz-transition-delay: @delay;
  -o-transition-delay: @delay;
  transition-delay: @delay;
}

.transition-duration(@duration: 0.2s) {
  -moz-transition-duration: @duration;
  -webkit-transition-duration: @duration;
  -o-transition-duration: @duration;
  transition-duration: @duration;
}

.transform-origin(@origin) {
  -webkit-transform-origin: @origin;
  -moz-transform-origin: @origin;
  -o-transform-origin: @origin;
  -ms-transform-origin: @origin;
  transform-origin: @origin;
}

.user-select(@argument: none) {
  -webkit-user-select: @argument;
  -moz-user-select: @argument;
  -ms-user-select: @argument;
  user-select: @argument;
}

.opacity(@opacity: 0.5) {
  -moz-opacity: @opacity;
  -khtml-opacity: @opacity;
  -webkit-opacity: @opacity;
  opacity: @opacity;
  @opperc: @opacity * 100;
  -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
  filter: ~"alpha(opacity=@{opperc})";
}
